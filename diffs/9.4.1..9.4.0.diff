diff --git a/IgniteDiffApp/app.json b/IgniteDiffApp/app.json
index c30039f..2ca2ca7 100644
--- a/IgniteDiffApp/app.json
+++ b/IgniteDiffApp/app.json
@@ -72,6 +72,6 @@
     }
   },
   "ignite": {
-    "version": "9.4.1"
+    "version": "9.4.0"
   }
 }
\ No newline at end of file
diff --git a/IgniteDiffApp/app/i18n/i18n.ts b/IgniteDiffApp/app/i18n/i18n.ts
index 8ad301f..06b9cf4 100644
--- a/IgniteDiffApp/app/i18n/i18n.ts
+++ b/IgniteDiffApp/app/i18n/i18n.ts
@@ -9,29 +9,25 @@ import ko from "./ko"
 import fr from "./fr"
 
 i18n.fallbacks = true
-
-// to use regional locales use { "en-US": enUS } etc
-i18n.translations = { ar, "en-US": en, ko, fr }
-
-const fallbackLocale = "en"
-const systemLocale = Localization.getLocales()[0]
-const systemLocaleTag = systemLocale.languageTag
-
-if (Object.prototype.hasOwnProperty.call(i18n.translations, systemLocaleTag)) {
-  // if specific locales like en-FI or en-US is available, set it
-  i18n.locale = systemLocaleTag
-} else {
-  // otherwise try to fallback to the general locale (dropping the -XX suffix)
-  const generalLocale = systemLocaleTag.split("-")[0]
-  if (Object.prototype.hasOwnProperty.call(i18n.translations, generalLocale)) {
-    i18n.locale = generalLocale
-  } else {
-    i18n.locale = fallbackLocale
-  }
+/**
+ * we need always include "*-US" for some valid language codes because when you change the system language,
+ * the language code is the suffixed with "-US". i.e. if a device is set to English ("en"),
+ * if you change to another language and then return to English language code is now "en-US".
+ */
+i18n.translations = { ar, en, "en-US": en, ko, fr }
+
+const locales = Localization.getLocales() // This method is guaranteed to return at least one array item.
+// The preferred language is the first element in the array, however, we fallback to en-US, especially for tests.
+const preferredLanguage:
+  | Localization.Locale
+  | { languageTag: string; textDirection: "ltr" | "rtl" } = locales[0] || {
+  languageTag: "en-US",
+  textDirection: "ltr",
 }
+i18n.locale = preferredLanguage.languageTag
 
 // handle RTL languages
-export const isRTL = systemLocale.textDirection === "rtl"
+export const isRTL = preferredLanguage.textDirection === "rtl"
 I18nManager.allowRTL(isRTL)
 I18nManager.forceRTL(isRTL)
 
diff --git a/IgniteDiffApp/app/utils/useSafeAreaInsetsStyle.ts b/IgniteDiffApp/app/utils/useSafeAreaInsetsStyle.ts
index 6d11b31..656cd0f 100644
--- a/IgniteDiffApp/app/utils/useSafeAreaInsetsStyle.ts
+++ b/IgniteDiffApp/app/utils/useSafeAreaInsetsStyle.ts
@@ -20,7 +20,7 @@ const edgeInsetMap: Record<string, Edge> = {
 /**
  * A hook that can be used to create a safe-area-aware style object that can be passed directly to a View.
  *
- * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/boilerplate/utility/useSafeAreaInsetsStyle.md)
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Utils-useSafeAreaInsetsStyle.md)
  */
 export function useSafeAreaInsetsStyle(
   safeAreaEdges: ExtendedEdge[] = [],
diff --git a/IgniteDiffApp/test/setup.ts b/IgniteDiffApp/test/setup.ts
index 2fce6c0..28040ba 100644
--- a/IgniteDiffApp/test/setup.ts
+++ b/IgniteDiffApp/test/setup.ts
@@ -34,11 +34,6 @@ jest.mock("i18n-js", () => ({
   },
 }))
 
-jest.mock("expo-localization", () => ({
-  ...jest.requireActual("expo-localization"),
-  getLocales: () => [{ languageTag: "en-US", textDirection: "ltr" }],
-}))
-
 declare const tron // eslint-disable-line @typescript-eslint/no-unused-vars
 
 jest.useFakeTimers()
