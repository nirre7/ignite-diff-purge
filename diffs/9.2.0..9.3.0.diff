diff --git a/IgniteDiffApp/.gitignore b/IgniteDiffApp/.gitignore
index 7b101a9..a5c60cc 100644
--- a/IgniteDiffApp/.gitignore
+++ b/IgniteDiffApp/.gitignore
@@ -59,9 +59,6 @@ buck-out/
 # Bundle artifact
 *.jsbundle
 
-# CocoaPods
-/ios/Pods/
-
 # Ignite-specific items below
 # You can safely replace everything above this comment with whatever is
 # in the default .gitignore generated by React-Native CLI
@@ -72,11 +69,10 @@ buck-out/
 # Expo
 .expo/*
 bin/Exponent.app
+/android
+/ios
 
-# If using Expo Go/Prebuild, uncomment these:
-# android
-# ios
-
+## Secrets
 npm-debug.*
 *.jks
 *.p8
diff --git a/IgniteDiffApp/app.json b/IgniteDiffApp/app.json
index 0a7ee47..6f1b7ae 100644
--- a/IgniteDiffApp/app.json
+++ b/IgniteDiffApp/app.json
@@ -72,6 +72,6 @@
     }
   },
   "ignite": {
-    "version": "9.2.0"
+    "version": "9.3.0"
   }
 }
\ No newline at end of file
diff --git a/IgniteDiffApp/app/components/AutoImage.tsx b/IgniteDiffApp/app/components/AutoImage.tsx
index 9f36b8f..bf2f7c8 100644
--- a/IgniteDiffApp/app/components/AutoImage.tsx
+++ b/IgniteDiffApp/app/components/AutoImage.tsx
@@ -54,7 +54,7 @@ export function useAutoImage(
 /**
  * An Image component that automatically sizes a remote or data-uri image.
  *
- * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-AutoImage.md)
+ * - [Documentation and Examples](https://docs.infinite.red/ignite-cli/boilerplate/components/AutoImage/)
  */
 export function AutoImage(props: AutoImageProps) {
   const { maxWidth, maxHeight, ...ImageProps } = props
diff --git a/IgniteDiffApp/app/components/Button.tsx b/IgniteDiffApp/app/components/Button.tsx
index 38aa03c..6e43c54 100644
--- a/IgniteDiffApp/app/components/Button.tsx
+++ b/IgniteDiffApp/app/components/Button.tsx
@@ -15,6 +15,7 @@ type Presets = keyof typeof $viewPresets
 export interface ButtonAccessoryProps {
   style: StyleProp<any>
   pressableState: PressableStateCallbackType
+  disabled?: boolean
 }
 
 export interface ButtonProps extends PressableProps {
@@ -47,6 +48,10 @@ export interface ButtonProps extends PressableProps {
    * An optional style override for the button text when in the "pressed" state.
    */
   pressedTextStyle?: StyleProp<TextStyle>
+  /**
+   * An optional style override for the button text when in the "disabled" state.
+   */
+  disabledTextStyle?: StyleProp<TextStyle>
   /**
    * One of the different types of button presets.
    */
@@ -65,6 +70,15 @@ export interface ButtonProps extends PressableProps {
    * Children components.
    */
   children?: React.ReactNode
+  /**
+   * disabled prop, accessed directly for declarative styling reasons.
+   * https://reactnative.dev/docs/pressable#disabled
+   */
+  disabled?: boolean
+  /**
+   * An optional style override for the disabled state
+   */
+  disabledStyle?: StyleProp<ViewStyle>
 }
 
 /**
@@ -82,9 +96,12 @@ export function Button(props: ButtonProps) {
     pressedStyle: $pressedViewStyleOverride,
     textStyle: $textStyleOverride,
     pressedTextStyle: $pressedTextStyleOverride,
+    disabledTextStyle: $disabledTextStyleOverride,
     children,
     RightAccessory,
     LeftAccessory,
+    disabled,
+    disabledStyle: $disabledViewStyleOverride,
     ...rest
   } = props
 
@@ -94,6 +111,7 @@ export function Button(props: ButtonProps) {
       $viewPresets[preset],
       $viewStyleOverride,
       !!pressed && [$pressedViewPresets[preset], $pressedViewStyleOverride],
+      !!disabled && $disabledViewStyleOverride,
     ]
   }
   function $textStyle({ pressed }: PressableStateCallbackType) {
@@ -101,21 +119,34 @@ export function Button(props: ButtonProps) {
       $textPresets[preset],
       $textStyleOverride,
       !!pressed && [$pressedTextPresets[preset], $pressedTextStyleOverride],
+      !!disabled && $disabledTextStyleOverride,
     ]
   }
 
   return (
-    <Pressable style={$viewStyle} accessibilityRole="button" {...rest}>
+    <Pressable
+      style={$viewStyle}
+      accessibilityRole="button"
+      accessibilityState={{ disabled: !!disabled }}
+      {...rest}
+      disabled={disabled}
+    >
       {(state) => (
         <>
-          {!!LeftAccessory && <LeftAccessory style={$leftAccessoryStyle} pressableState={state} />}
+          {!!LeftAccessory && (
+            <LeftAccessory style={$leftAccessoryStyle} pressableState={state} disabled={disabled} />
+          )}
 
           <Text tx={tx} text={text} txOptions={txOptions} style={$textStyle(state)}>
             {children}
           </Text>
 
           {!!RightAccessory && (
-            <RightAccessory style={$rightAccessoryStyle} pressableState={state} />
+            <RightAccessory
+              style={$rightAccessoryStyle}
+              pressableState={state}
+              disabled={disabled}
+            />
           )}
         </>
       )}
diff --git a/IgniteDiffApp/app/navigators/navigationUtilities.ts b/IgniteDiffApp/app/navigators/navigationUtilities.ts
index 4fe25d6..9b8885e 100644
--- a/IgniteDiffApp/app/navigators/navigationUtilities.ts
+++ b/IgniteDiffApp/app/navigators/navigationUtilities.ts
@@ -44,8 +44,8 @@ export function getActiveRouteName(state: NavigationState | PartialState<Navigat
  * the navigation or allows exiting the app.
  */
 export function useBackButtonHandler(canExit: (routeName: string) => boolean) {
-  // ignore if iOS ... no back button!
-  if (Platform.OS === "ios") return
+  // ignore unless android... no back button!
+  if (Platform.OS !== "android") return
 
   // The reason we're using a ref here is because we need to be able
   // to update the canExit function without re-setting up all the listeners
diff --git a/IgniteDiffApp/app/screens/DemoShowroomScreen/demos/DemoButton.tsx b/IgniteDiffApp/app/screens/DemoShowroomScreen/demos/DemoButton.tsx
index dd860b2..7580ee0 100644
--- a/IgniteDiffApp/app/screens/DemoShowroomScreen/demos/DemoButton.tsx
+++ b/IgniteDiffApp/app/screens/DemoShowroomScreen/demos/DemoButton.tsx
@@ -27,6 +27,12 @@ const $customButtonRightAccessoryStyle: ViewStyle = {
 }
 const $customButtonPressedRightAccessoryStyle: ImageStyle = { tintColor: colors.palette.neutral100 }
 
+const $disabledOpacity: ViewStyle = { opacity: 0.5 }
+const $disabledButtonTextStyle: TextStyle = {
+  color: colors.palette.neutral100,
+  textDecorationColor: colors.palette.neutral100,
+}
+
 export const DemoButton: Demo = {
   name: "Button",
   description:
@@ -136,5 +142,70 @@ export const DemoButton: Demo = {
         Style Pressed State - fugiat anim
       </Button>
     </DemoUseCase>,
+
+    <DemoUseCase
+      name="Disabling"
+      description="The component can be disabled, and styled based on that. Press behavior will be disabled."
+    >
+      <Button
+        disabled
+        disabledStyle={$disabledOpacity}
+        pressedStyle={$customButtonPressedStyle}
+        pressedTextStyle={$customButtonPressedTextStyle}
+      >
+        Disabled - standard
+      </Button>
+      <DemoDivider />
+
+      <Button
+        disabled
+        preset="filled"
+        disabledStyle={$disabledOpacity}
+        pressedStyle={$customButtonPressedStyle}
+        pressedTextStyle={$customButtonPressedTextStyle}
+      >
+        Disabled - filled
+      </Button>
+      <DemoDivider />
+
+      <Button
+        disabled
+        preset="reversed"
+        disabledStyle={$disabledOpacity}
+        pressedStyle={$customButtonPressedStyle}
+        pressedTextStyle={$customButtonPressedTextStyle}
+      >
+        Disabled - reversed
+      </Button>
+      <DemoDivider />
+
+      <Button
+        disabled
+        pressedStyle={$customButtonPressedStyle}
+        pressedTextStyle={$customButtonPressedTextStyle}
+        RightAccessory={(props) => (
+          <View
+            style={
+              props.disabled
+                ? [$customButtonRightAccessoryStyle, $disabledOpacity]
+                : $customButtonPressedRightAccessoryStyle
+            }
+          />
+        )}
+      >
+        Disabled accessory style
+      </Button>
+      <DemoDivider />
+
+      <Button
+        disabled
+        preset="filled"
+        disabledTextStyle={[$customButtonTextStyle, $disabledButtonTextStyle]}
+        pressedStyle={$customButtonPressedStyle}
+        pressedTextStyle={$customButtonPressedTextStyle}
+      >
+        Disabled text style
+      </Button>
+    </DemoUseCase>,
   ],
 }
diff --git a/IgniteDiffApp/app/screens/ErrorScreen/ErrorBoundary.tsx b/IgniteDiffApp/app/screens/ErrorScreen/ErrorBoundary.tsx
index ad0f37a..ca8025f 100644
--- a/IgniteDiffApp/app/screens/ErrorScreen/ErrorBoundary.tsx
+++ b/IgniteDiffApp/app/screens/ErrorScreen/ErrorBoundary.tsx
@@ -17,7 +17,7 @@ interface State {
  * class component because according to the documentation, only class
  * components can be error boundaries.
  *
- * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Error-Boundary.md)
+ * - [Documentation and Examples](https://docs.infinite.red/ignite-cli/concept/Error-Boundary/)
  * - [React Error Boundaries](https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary)
  */
 export class ErrorBoundary extends Component<Props, State> {
