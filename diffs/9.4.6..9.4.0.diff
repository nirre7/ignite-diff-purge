diff --git a/IgniteDiffApp/.maestro/FavoritePodcast.yaml b/IgniteDiffApp/.maestro/FavoritePodcast.yaml
index 6b3231b..0fe5b19 100644
--- a/IgniteDiffApp/.maestro/FavoritePodcast.yaml
+++ b/IgniteDiffApp/.maestro/FavoritePodcast.yaml
@@ -2,6 +2,7 @@
 
 appId: com.ignitediffapp
 env:
+  TITLE: "RNR 257 - META RESPONDS! How can we improve React Native, part 2"
   FAVORITES_TEXT: "Switch on to only show favorites"
 
 ---
@@ -15,14 +16,14 @@ env:
     text: ${FAVORITES_TEXT}
     # https://maestro.mobile.dev/troubleshooting/known-issues#android-accidental-double-tap
     retryTapIfNoChange: false
-- repeat:
-    times: 2
-    commands:
-      - scroll
-- copyTextFrom:
-    text: "^RNR.*" # assumes all podcast titles start with RNR
-    index: 1 # grab the second one, the first one might not be fully visible
-- longPressOn: ${maestro.copiedText}
+- scrollUntilVisible:
+    element:
+      text: ${TITLE}
+    direction: DOWN
+    timeout: 50000
+    speed: 40
+    visibilityPercentage: 100
+- longPressOn: ${TITLE}
 - scrollUntilVisible:
     element:
       text: ${FAVORITES_TEXT}
@@ -32,5 +33,5 @@ env:
     visibilityPercentage: 100
 - tapOn:
     text: ${FAVORITES_TEXT}
-- assertVisible: ${maestro.copiedText}
+- assertVisible: ${TITLE}
 
diff --git a/IgniteDiffApp/app.json b/IgniteDiffApp/app.json
index c8c0e82..2ca2ca7 100644
--- a/IgniteDiffApp/app.json
+++ b/IgniteDiffApp/app.json
@@ -72,6 +72,6 @@
     }
   },
   "ignite": {
-    "version": "9.4.6"
+    "version": "9.4.0"
   }
 }
\ No newline at end of file
diff --git a/IgniteDiffApp/app/app.tsx b/IgniteDiffApp/app/app.tsx
index f83f1d5..c968524 100644
--- a/IgniteDiffApp/app/app.tsx
+++ b/IgniteDiffApp/app/app.tsx
@@ -60,8 +60,6 @@ interface AppProps {
 
 /**
  * This is the root component of our app.
- * @param {AppProps} props - The props for the `App` component.
- * @returns {JSX.Element} The rendered `App` component.
  */
 function App(props: AppProps) {
   const { hideSplashScreen } = props
diff --git a/IgniteDiffApp/app/components/AutoImage.tsx b/IgniteDiffApp/app/components/AutoImage.tsx
index 1c159b4..bf2f7c8 100644
--- a/IgniteDiffApp/app/components/AutoImage.tsx
+++ b/IgniteDiffApp/app/components/AutoImage.tsx
@@ -1,6 +1,7 @@
 import React, { useLayoutEffect, useState } from "react"
 import { Image, ImageProps, ImageURISource, Platform } from "react-native"
 
+// TODO: document new props
 export interface AutoImageProps extends ImageProps {
   /**
    * How wide should the image be?
@@ -20,9 +21,7 @@ export interface AutoImageProps extends ImageProps {
  * How is this different from `resizeMode: 'contain'`? Firstly, you can
  * specify only one side's size (not both). Secondly, the image will scale to fit
  * the desired dimensions instead of just being contained within its image-container.
- * @param {number} remoteUri - The URI of the remote image.
- * @param {number} dimensions - The desired dimensions of the image. If not provided, the original dimensions will be returned.
- * @returns {[number, number]} - The scaled dimensions of the image.
+ *
  */
 export function useAutoImage(
   remoteUri: string,
@@ -54,9 +53,8 @@ export function useAutoImage(
 
 /**
  * An Image component that automatically sizes a remote or data-uri image.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/AutoImage/}
- * @param {AutoImageProps} props - The props for the `AutoImage` component.
- * @returns {JSX.Element} The rendered `AutoImage` component.
+ *
+ * - [Documentation and Examples](https://docs.infinite.red/ignite-cli/boilerplate/components/AutoImage/)
  */
 export function AutoImage(props: AutoImageProps) {
   const { maxWidth, maxHeight, ...ImageProps } = props
diff --git a/IgniteDiffApp/app/components/Button.tsx b/IgniteDiffApp/app/components/Button.tsx
index 33c6f29..6e43c54 100644
--- a/IgniteDiffApp/app/components/Button.tsx
+++ b/IgniteDiffApp/app/components/Button.tsx
@@ -84,16 +84,8 @@ export interface ButtonProps extends PressableProps {
 /**
  * A component that allows users to take actions and make choices.
  * Wraps the Text component with a Pressable component.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/Button/}
- * @param {ButtonProps} props - The props for the `Button` component.
- * @returns {JSX.Element} The rendered `Button` component.
- * @example
- * <Button
- *   tx="common.ok"
- *   style={styles.button}
- *   textStyle={styles.buttonText}
- *   onPress={handleButtonPress}
- * />
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Button.md)
  */
 export function Button(props: ButtonProps) {
   const {
@@ -114,12 +106,7 @@ export function Button(props: ButtonProps) {
   } = props
 
   const preset: Presets = props.preset ?? "default"
-  /**
-   * @param {PressableStateCallbackType} root0 - The root object containing the pressed state.
-   * @param {boolean} root0.pressed - The pressed state.
-   * @returns {StyleProp<ViewStyle>} The view style based on the pressed state.
-   */
-  function $viewStyle({ pressed }: PressableStateCallbackType): StyleProp<ViewStyle> {
+  function $viewStyle({ pressed }: PressableStateCallbackType) {
     return [
       $viewPresets[preset],
       $viewStyleOverride,
@@ -127,12 +114,7 @@ export function Button(props: ButtonProps) {
       !!disabled && $disabledViewStyleOverride,
     ]
   }
-  /**
-   * @param {PressableStateCallbackType} root0 - The root object containing the pressed state.
-   * @param {boolean} root0.pressed - The pressed state.
-   * @returns {StyleProp<TextStyle>} The text style based on the pressed state.
-   */
-  function $textStyle({ pressed }: PressableStateCallbackType): StyleProp<TextStyle> {
+  function $textStyle({ pressed }: PressableStateCallbackType) {
     return [
       $textPresets[preset],
       $textStyleOverride,
diff --git a/IgniteDiffApp/app/components/Card.tsx b/IgniteDiffApp/app/components/Card.tsx
index 08a1202..66323f1 100644
--- a/IgniteDiffApp/app/components/Card.tsx
+++ b/IgniteDiffApp/app/components/Card.tsx
@@ -119,9 +119,8 @@ interface CardProps extends TouchableOpacityProps {
 /**
  * Cards are useful for displaying related information in a contained way.
  * If a ListItem displays content horizontally, a Card can be used to display content vertically.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/Card/}
- * @param {CardProps} props - The props for the `Card` component.
- * @returns {JSX.Element} The rendered `Card` component.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Card.md)
  */
 export function Card(props: CardProps) {
   const {
diff --git a/IgniteDiffApp/app/components/EmptyState.tsx b/IgniteDiffApp/app/components/EmptyState.tsx
index 5e77cc0..5f78ed1 100644
--- a/IgniteDiffApp/app/components/EmptyState.tsx
+++ b/IgniteDiffApp/app/components/EmptyState.tsx
@@ -119,9 +119,8 @@ const EmptyStatePresets = {
 
 /**
  * A component to use when there is no data to display. It can be utilized to direct the user what to do next.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/EmptyState/}
- * @param {EmptyStateProps} props - The props for the `EmptyState` component.
- * @returns {JSX.Element} The rendered `EmptyState` component.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-EmptyState.md)
  */
 export function EmptyState(props: EmptyStateProps) {
   const preset = EmptyStatePresets[props.preset ?? "generic"]
diff --git a/IgniteDiffApp/app/components/Header.tsx b/IgniteDiffApp/app/components/Header.tsx
index 1d81324..273298e 100644
--- a/IgniteDiffApp/app/components/Header.tsx
+++ b/IgniteDiffApp/app/components/Header.tsx
@@ -139,9 +139,8 @@ interface HeaderActionProps {
 /**
  * Header that appears on many screens. Will hold navigation buttons and screen title.
  * The Header is meant to be used with the `screenOptions.header` option on navigators, routes, or screen components via `navigation.setOptions({ header })`.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/Header/}
- * @param {HeaderProps} props - The props for the `Header` component.
- * @returns {JSX.Element} The rendered `Header` component.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Header.md)
  */
 export function Header(props: HeaderProps) {
   const {
@@ -222,10 +221,6 @@ export function Header(props: HeaderProps) {
   )
 }
 
-/**
- * @param {HeaderActionProps} props - The props for the `HeaderAction` component.
- * @returns {JSX.Element} The rendered `HeaderAction` component.
- */
 function HeaderAction(props: HeaderActionProps) {
   const { backgroundColor, icon, text, tx, txOptions, onPress, ActionComponent, iconColor } = props
 
diff --git a/IgniteDiffApp/app/components/Icon.tsx b/IgniteDiffApp/app/components/Icon.tsx
index dae37ec..08def01 100644
--- a/IgniteDiffApp/app/components/Icon.tsx
+++ b/IgniteDiffApp/app/components/Icon.tsx
@@ -48,9 +48,8 @@ interface IconProps extends TouchableOpacityProps {
 /**
  * A component to render a registered icon.
  * It is wrapped in a <TouchableOpacity /> if `onPress` is provided, otherwise a <View />.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/Icon/}
- * @param {IconProps} props - The props for the `Icon` component.
- * @returns {JSX.Element} The rendered `Icon` component.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Icon.md)
  */
 export function Icon(props: IconProps) {
   const {
diff --git a/IgniteDiffApp/app/components/ListItem.tsx b/IgniteDiffApp/app/components/ListItem.tsx
index 4ab9607..4863790 100644
--- a/IgniteDiffApp/app/components/ListItem.tsx
+++ b/IgniteDiffApp/app/components/ListItem.tsx
@@ -98,9 +98,8 @@ interface ListItemActionProps {
 
 /**
  * A styled row component that can be used in FlatList, SectionList, or by itself.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/ListItem/}
- * @param {ListItemProps} props - The props for the `ListItem` component.
- * @returns {JSX.Element} The rendered `ListItem` component.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-ListItem.md)
  */
 export function ListItem(props: ListItemProps) {
   const {
@@ -161,10 +160,6 @@ export function ListItem(props: ListItemProps) {
   )
 }
 
-/**
- * @param {ListItemActionProps} props - The props for the `ListItemAction` component.
- * @returns {JSX.Element | null} The rendered `ListItemAction` component.
- */
 function ListItemAction(props: ListItemActionProps) {
   const { icon, Component, iconColor, size, side } = props
 
diff --git a/IgniteDiffApp/app/components/ListView.tsx b/IgniteDiffApp/app/components/ListView.tsx
index ef3406a..3b12bc2 100644
--- a/IgniteDiffApp/app/components/ListView.tsx
+++ b/IgniteDiffApp/app/components/ListView.tsx
@@ -18,12 +18,15 @@ export type ListViewProps<T> = PropsWithoutRef<FlashListProps<T>>
  *
  * This is a temporary workaround until the FlashList component supports RTL at
  * which point this component can be removed and we will default to using FlashList everywhere.
+ *
  * @see {@link https://github.com/Shopify/flash-list/issues/544|RTL Bug Android}
  * @see {@link https://github.com/Shopify/flash-list/issues/840|Flashlist Not Support RTL}
- * @param {FlashListProps | FlatListProps} props - The props for the `ListView` component.
- * @param {React.RefObject<ListViewRef>} forwardRef - An optional forwarded ref.
- * @returns {JSX.Element} The rendered `ListView` component.
+ *
+ * @param props - FlashListProps | FlatListProps
+ * @param forwardRef - React.Ref<ListProps<T>>
+ * @returns JSX.Element
  */
+
 const ListViewComponent = forwardRef(
   <T,>(props: ListViewProps<T>, ref: React.ForwardedRef<ListViewRef<T>>) => {
     const ListComponentWrapper = isRTL ? FlatList : FlashList
diff --git a/IgniteDiffApp/app/components/Screen.tsx b/IgniteDiffApp/app/components/Screen.tsx
index eddae55..8c1f22a 100644
--- a/IgniteDiffApp/app/components/Screen.tsx
+++ b/IgniteDiffApp/app/components/Screen.tsx
@@ -83,26 +83,11 @@ export type ScreenProps = ScrollScreenProps | FixedScreenProps | AutoScreenProps
 
 const isIos = Platform.OS === "ios"
 
-type ScreenPreset = "fixed" | "scroll" | "auto"
-
-/**
- * @param {ScreenPreset?} preset - The preset to check.
- * @returns {boolean} - Whether the preset is non-scrolling.
- */
-function isNonScrolling(preset?: ScreenPreset) {
+function isNonScrolling(preset?: ScreenProps["preset"]) {
   return !preset || preset === "fixed"
 }
 
-/**
- * Custom hook that handles the automatic enabling/disabling of scroll ability based on the content size and screen size.
- * @param {UseAutoPresetProps} props - The props for the `useAutoPreset` hook.
- * @returns {{boolean, Function, Function}} - The scroll state, and the `onContentSizeChange` and `onLayout` functions.
- */
-function useAutoPreset(props: AutoScreenProps): {
-  scrollEnabled: boolean
-  onContentSizeChange: (w: number, h: number) => void
-  onLayout: (e: LayoutChangeEvent) => void
-} {
+function useAutoPreset(props: AutoScreenProps) {
   const { preset, scrollEnabledToggleThreshold } = props
   const { percent = 0.92, point = 0 } = scrollEnabledToggleThreshold || {}
 
@@ -129,19 +114,12 @@ function useAutoPreset(props: AutoScreenProps): {
     if (!scrollEnabled && !contentFitsScreen) setScrollEnabled(true)
   }
 
-  /**
-   * @param {number} w - The width of the content.
-   * @param {number} h - The height of the content.
-   */
   function onContentSizeChange(w: number, h: number) {
     // update scroll-view content height
     scrollViewContentHeight.current = h
     updateScrollState()
   }
 
-  /**
-   * @param {LayoutChangeEvent} e = The layout change event.
-   */
   function onLayout(e: LayoutChangeEvent) {
     const { height } = e.nativeEvent.layout
     // update scroll-view  height
@@ -159,10 +137,6 @@ function useAutoPreset(props: AutoScreenProps): {
   }
 }
 
-/**
- * @param {ScreenProps} props - The props for the `ScreenWithoutScrolling` component.
- * @returns {JSX.Element} - The rendered `ScreenWithoutScrolling` component.
- */
 function ScreenWithoutScrolling(props: ScreenProps) {
   const { style, contentContainerStyle, children } = props
   return (
@@ -172,10 +146,6 @@ function ScreenWithoutScrolling(props: ScreenProps) {
   )
 }
 
-/**
- * @param {ScreenProps} props - The props for the `ScreenWithScrolling` component.
- * @returns {JSX.Element} - The rendered `ScreenWithScrolling` component.
- */
 function ScreenWithScrolling(props: ScreenProps) {
   const {
     children,
@@ -217,14 +187,6 @@ function ScreenWithScrolling(props: ScreenProps) {
   )
 }
 
-/**
- * Represents a screen component that provides a consistent layout and behavior for different screen presets.
- * The `Screen` component can be used with different presets such as "fixed", "scroll", or "auto".
- * It handles safe area insets, status bar settings, keyboard avoiding behavior, and scrollability based on the preset.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/Screen/}
- * @param {ScreenProps} props - The props for the `Screen` component.
- * @returns {JSX.Element} The rendered `Screen` component.
- */
 export function Screen(props: ScreenProps) {
   const {
     backgroundColor = colors.background,
diff --git a/IgniteDiffApp/app/components/Text.tsx b/IgniteDiffApp/app/components/Text.tsx
index 88ab965..595ad43 100644
--- a/IgniteDiffApp/app/components/Text.tsx
+++ b/IgniteDiffApp/app/components/Text.tsx
@@ -47,9 +47,8 @@ export interface TextProps extends RNTextProps {
 /**
  * For your text displaying needs.
  * This component is a HOC over the built-in React Native one.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/Text/}
- * @param {TextProps} props - The props for the `Text` component.
- * @returns {JSX.Element} The rendered `Text` component.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Text.md)
  */
 export function Text(props: TextProps) {
   const { weight, size, tx, txOptions, text, children, style: $styleOverride, ...rest } = props
diff --git a/IgniteDiffApp/app/components/TextField.tsx b/IgniteDiffApp/app/components/TextField.tsx
index 26a1ca6..1b42f8a 100644
--- a/IgniteDiffApp/app/components/TextField.tsx
+++ b/IgniteDiffApp/app/components/TextField.tsx
@@ -99,9 +99,8 @@ export interface TextFieldProps extends Omit<TextInputProps, "ref"> {
 
 /**
  * A component that allows for the entering and editing of text.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/TextField/}
- * @param {TextFieldProps} props - The props for the `TextField` component.
- * @returns {JSX.Element} The rendered `TextField` component.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-TextField.md)
  */
 export const TextField = forwardRef(function TextField(props: TextFieldProps, ref: Ref<TextInput>) {
   const {
@@ -159,9 +158,6 @@ export const TextField = forwardRef(function TextField(props: TextFieldProps, re
     HelperTextProps?.style,
   ]
 
-  /**
-   *
-   */
   function focusInput() {
     if (disabled) return
 
diff --git a/IgniteDiffApp/app/components/Toggle.tsx b/IgniteDiffApp/app/components/Toggle.tsx
index 7fb1b47..47e96d1 100644
--- a/IgniteDiffApp/app/components/Toggle.tsx
+++ b/IgniteDiffApp/app/components/Toggle.tsx
@@ -155,9 +155,8 @@ interface ToggleInputProps {
 /**
  * Renders a boolean input.
  * This is a controlled component that requires an onValueChange callback that updates the value prop in order for the component to reflect user actions. If the value prop is not updated, the component will continue to render the supplied value prop instead of the expected result of any user actions.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/Toggle/}
- * @param {ToggleProps} props - The props for the `Toggle` component.
- * @returns {JSX.Element} The rendered `Toggle` component.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Toggle.md)
  */
 export function Toggle(props: ToggleProps) {
   const {
@@ -196,9 +195,6 @@ export function Toggle(props: ToggleProps) {
     HelperTextProps?.style,
   ]
 
-  /**
-   * @param {GestureResponderEvent} e - The event object.
-   */
   function handlePress(e: GestureResponderEvent) {
     if (disabled) return
     onValueChange?.(!value)
@@ -251,10 +247,6 @@ const ToggleInputs: Record<Variants, FC<ToggleInputProps>> = {
   radio: Radio,
 }
 
-/**
- * @param {ToggleInputProps} props - The props for the `Checkbox` component.
- * @returns {JSX.Element} The rendered `Checkbox` component.
- */
 function Checkbox(props: ToggleInputProps) {
   const {
     on,
@@ -320,10 +312,6 @@ function Checkbox(props: ToggleInputProps) {
   )
 }
 
-/**
- * @param {ToggleInputProps} props - The props for the `Radio` component.
- * @returns {JSX.Element} The rendered `Radio` component.
- */
 function Radio(props: ToggleInputProps) {
   const {
     on,
@@ -383,10 +371,6 @@ function Radio(props: ToggleInputProps) {
   )
 }
 
-/**
- * @param {ToggleInputProps} props - The props for the `Switch` component.
- * @returns {JSX.Element} The rendered `Switch` component.
- */
 function Switch(props: ToggleInputProps) {
   const {
     on,
@@ -489,10 +473,6 @@ function Switch(props: ToggleInputProps) {
   )
 }
 
-/**
- * @param {ToggleInputProps & { role: "on" | "off" }} props - The props for the `SwitchAccessibilityLabel` component.
- * @returns {JSX.Element} The rendered `SwitchAccessibilityLabel` component.
- */
 function SwitchAccessibilityLabel(props: ToggleInputProps & { role: "on" | "off" }) {
   const { on, disabled, status, switchAccessibilityMode, role, innerStyle, detailStyle } = props
 
@@ -536,10 +516,6 @@ function SwitchAccessibilityLabel(props: ToggleInputProps & { role: "on" | "off"
   )
 }
 
-/**
- * @param {BaseToggleProps} props - The props for the `FieldLabel` component.
- * @returns {JSX.Element} The rendered `FieldLabel` component.
- */
 function FieldLabel(props: BaseToggleProps) {
   const {
     status,
diff --git a/IgniteDiffApp/app/devtools/ReactotronClient.web.ts b/IgniteDiffApp/app/devtools/ReactotronClient.web.ts
index e7fbed4..5b56dfe 100644
--- a/IgniteDiffApp/app/devtools/ReactotronClient.web.ts
+++ b/IgniteDiffApp/app/devtools/ReactotronClient.web.ts
@@ -3,9 +3,6 @@
  * of Reactotron's client.
  *
  * React Native is loaded from ReactotronClient.ts.
- *
- * If your project does not need web support, you can delete this file and
- * remove reactotron-react-js from your package.json dependencies.
  */
 import Reactotron from "reactotron-react-js"
 export { Reactotron }
diff --git a/IgniteDiffApp/app/devtools/ReactotronConfig.ts b/IgniteDiffApp/app/devtools/ReactotronConfig.ts
index 436a407..17efb15 100644
--- a/IgniteDiffApp/app/devtools/ReactotronConfig.ts
+++ b/IgniteDiffApp/app/devtools/ReactotronConfig.ts
@@ -22,7 +22,7 @@ const reactotron = Reactotron.configure({
   },
 }).use(
   mst({
-    /* ignore some chatty `mobx-state-tree` actions */
+    /** ignore some chatty `mobx-state-tree` actions  */
     filter: (event) => /postProcessSnapshot|@APPLY_SNAPSHOT/.test(event.name) === false,
   }),
 )
@@ -133,6 +133,7 @@ declare global {
     /**
      * Reactotron client for logging, displaying, measuring performance, and more.
      * @see https://github.com/infinitered/reactotron
+     *
      * @example
      * if (__DEV__) {
      *  console.tron.display({
@@ -142,6 +143,7 @@ declare global {
      *    important: true
      *  })
      * }
+     *
      */
     tron: typeof reactotron
   }
diff --git a/IgniteDiffApp/app/i18n/i18n.ts b/IgniteDiffApp/app/i18n/i18n.ts
index 680c990..06b9cf4 100644
--- a/IgniteDiffApp/app/i18n/i18n.ts
+++ b/IgniteDiffApp/app/i18n/i18n.ts
@@ -9,29 +9,25 @@ import ko from "./ko"
 import fr from "./fr"
 
 i18n.fallbacks = true
-
-// to use regional locales use { "en-US": enUS } etc
+/**
+ * we need always include "*-US" for some valid language codes because when you change the system language,
+ * the language code is the suffixed with "-US". i.e. if a device is set to English ("en"),
+ * if you change to another language and then return to English language code is now "en-US".
+ */
 i18n.translations = { ar, en, "en-US": en, ko, fr }
 
-const fallbackLocale = "en-US"
-const systemLocale = Localization.getLocales()[0]
-const systemLocaleTag = systemLocale?.languageTag ?? "en-US"
-
-if (Object.prototype.hasOwnProperty.call(i18n.translations, systemLocaleTag)) {
-  // if specific locales like en-FI or en-US is available, set it
-  i18n.locale = systemLocaleTag
-} else {
-  // otherwise try to fallback to the general locale (dropping the -XX suffix)
-  const generalLocale = systemLocaleTag.split("-")[0]
-  if (Object.prototype.hasOwnProperty.call(i18n.translations, generalLocale)) {
-    i18n.locale = generalLocale
-  } else {
-    i18n.locale = fallbackLocale
-  }
+const locales = Localization.getLocales() // This method is guaranteed to return at least one array item.
+// The preferred language is the first element in the array, however, we fallback to en-US, especially for tests.
+const preferredLanguage:
+  | Localization.Locale
+  | { languageTag: string; textDirection: "ltr" | "rtl" } = locales[0] || {
+  languageTag: "en-US",
+  textDirection: "ltr",
 }
+i18n.locale = preferredLanguage.languageTag
 
 // handle RTL languages
-export const isRTL = systemLocale?.textDirection === "rtl"
+export const isRTL = preferredLanguage.textDirection === "rtl"
 I18nManager.allowRTL(isRTL)
 I18nManager.forceRTL(isRTL)
 
diff --git a/IgniteDiffApp/app/i18n/translate.ts b/IgniteDiffApp/app/i18n/translate.ts
index 084fdcd..72669a6 100644
--- a/IgniteDiffApp/app/i18n/translate.ts
+++ b/IgniteDiffApp/app/i18n/translate.ts
@@ -3,9 +3,11 @@ import { TxKeyPath } from "./i18n"
 
 /**
  * Translates text.
- * @param {TxKeyPath} key - The i18n key.
- * @param {i18n.TranslateOptions} options - The i18n options.
- * @returns {string} - The translated text.
+ *
+ * @param key The i18n key.
+ * @param options The i18n options.
+ * @returns The translated text.
+ *
  * @example
  * Translations:
  *
@@ -23,6 +25,6 @@ import { TxKeyPath } from "./i18n"
  * // => "Hello world!"
  * ```
  */
-export function translate(key: TxKeyPath, options?: i18n.TranslateOptions): string {
+export function translate(key: TxKeyPath, options?: i18n.TranslateOptions) {
   return i18n.t(key, options)
 }
diff --git a/IgniteDiffApp/app/models/helpers/getRootStore.ts b/IgniteDiffApp/app/models/helpers/getRootStore.ts
index f1ca60f..5ff5056 100644
--- a/IgniteDiffApp/app/models/helpers/getRootStore.ts
+++ b/IgniteDiffApp/app/models/helpers/getRootStore.ts
@@ -4,8 +4,6 @@ import { RootStore, RootStoreModel } from "../RootStore"
 /**
  * Returns a RootStore object in strongly typed way
  * for stores to access other stores.
- * @param {IStateTreeNode} self - The store instance.
- * @returns {RootStore} - The RootStore instance.
  */
 export const getRootStore = (self: IStateTreeNode): RootStore => {
   return getRoot<typeof RootStoreModel>(self)
diff --git a/IgniteDiffApp/app/models/helpers/useStores.ts b/IgniteDiffApp/app/models/helpers/useStores.ts
index 575c90b..68b0cc7 100644
--- a/IgniteDiffApp/app/models/helpers/useStores.ts
+++ b/IgniteDiffApp/app/models/helpers/useStores.ts
@@ -46,10 +46,8 @@ export const useStores = () => useContext(RootStoreContext)
  * Used only in the app.tsx file, this hook sets up the RootStore
  * and then rehydrates it. It connects everything with Reactotron
  * and then lets the app know that everything is ready to go.
- * @param {() => void | Promise<void>} callback - an optional callback that's invoked once the store is ready
- * @returns {object} - the RootStore and rehydrated state
  */
-export const useInitialRootStore = (callback?: () => void | Promise<void>) => {
+export const useInitialRootStore = (callback: () => void | Promise<void>) => {
   const rootStore = useStores()
   const [rehydrated, setRehydrated] = useState(false)
 
diff --git a/IgniteDiffApp/app/navigators/DemoNavigator.tsx b/IgniteDiffApp/app/navigators/DemoNavigator.tsx
index 1ae617f..414158e 100644
--- a/IgniteDiffApp/app/navigators/DemoNavigator.tsx
+++ b/IgniteDiffApp/app/navigators/DemoNavigator.tsx
@@ -29,13 +29,6 @@ export type DemoTabScreenProps<T extends keyof DemoTabParamList> = CompositeScre
 
 const Tab = createBottomTabNavigator<DemoTabParamList>()
 
-/**
- * This is the main navigator for the demo screens with a bottom tab bar.
- * Each tab is a stack navigator with its own set of screens.
- *
- * More info: https://reactnavigation.org/docs/bottom-tab-navigator/
- * @returns {JSX.Element} The rendered `DemoNavigator`.
- */
 export function DemoNavigator() {
   const { bottom } = useSafeAreaInsets()
 
diff --git a/IgniteDiffApp/app/navigators/navigationUtilities.ts b/IgniteDiffApp/app/navigators/navigationUtilities.ts
index 77b098c..9b8885e 100644
--- a/IgniteDiffApp/app/navigators/navigationUtilities.ts
+++ b/IgniteDiffApp/app/navigators/navigationUtilities.ts
@@ -19,7 +19,7 @@ type Storage = typeof storage
  *
  * If needed, you can use this to access the navigation object outside of a
  * `NavigationContainer` context. However, it's recommended to use the `useNavigation` hook whenever possible.
- * @see [Navigating Without Navigation Prop]{@link https://reactnavigation.org/docs/navigating-without-navigation-prop/}
+ * @see https://reactnavigation.org/docs/navigating-without-navigation-prop/
  *
  * The types on this reference will only let you reference top level navigators. If you have
  * nested navigators, you'll need to use the `useNavigation` with the stack navigator's ParamList type.
@@ -28,8 +28,6 @@ export const navigationRef = createNavigationContainerRef<AppStackParamList>()
 
 /**
  * Gets the current screen from any navigation state.
- * @param {NavigationState | PartialState<NavigationState>} state - The navigation state to traverse.
- * @returns {string} - The name of the current screen.
  */
 export function getActiveRouteName(state: NavigationState | PartialState<NavigationState>): string {
   const route = state.routes[state.index ?? 0]
@@ -44,9 +42,6 @@ export function getActiveRouteName(state: NavigationState | PartialState<Navigat
 /**
  * Hook that handles Android back button presses and forwards those on to
  * the navigation or allows exiting the app.
- * @see [BackHandler]{@link https://reactnative.dev/docs/backhandler}
- * @param {(routeName: string) => boolean} canExit - Function that returns whether we can exit the app.
- * @returns {void}
  */
 export function useBackButtonHandler(canExit: (routeName: string) => boolean) {
   // ignore unless android... no back button!
@@ -97,8 +92,6 @@ export function useBackButtonHandler(canExit: (routeName: string) => boolean) {
 /**
  * This helper function will determine whether we should enable navigation persistence
  * based on a config setting and the __DEV__ environment (dev or prod).
- * @param {PersistNavigationConfig} persistNavigation - The config setting for navigation persistence.
- * @returns {boolean} - Whether to restore navigation state by default.
  */
 function navigationRestoredDefaultState(persistNavigation: PersistNavigationConfig) {
   if (persistNavigation === "always") return false
@@ -111,9 +104,6 @@ function navigationRestoredDefaultState(persistNavigation: PersistNavigationConf
 
 /**
  * Custom hook for persisting navigation state.
- * @param {Storage} storage - The storage utility to use.
- * @param {string} persistenceKey - The key to use for storing the navigation state.
- * @returns {object} - The navigation state and persistence functions.
  */
 export function useNavigationPersistence(storage: Storage, persistenceKey: string) {
   const [initialNavigationState, setInitialNavigationState] =
@@ -164,9 +154,7 @@ export function useNavigationPersistence(storage: Storage, persistenceKey: strin
 /**
  * use this to navigate without the navigation
  * prop. If you have access to the navigation prop, do not use this.
- * @see {@link https://reactnavigation.org/docs/navigating-without-navigation-prop/}
- * @param {unknown} name - The name of the route to navigate to.
- * @param {unknown} params - The params to pass to the route.
+ * @see https://reactnavigation.org/docs/navigating-without-navigation-prop/
  */
 export function navigate(name: unknown, params?: unknown) {
   if (navigationRef.isReady()) {
@@ -189,8 +177,6 @@ export function goBack() {
 
 /**
  * resetRoot will reset the root navigation state to the given params.
- * @param {Parameters<typeof navigationRef.resetRoot>[0]} state - The state to reset the root to.
- * @returns {void}
  */
 export function resetRoot(
   state: Parameters<typeof navigationRef.resetRoot>[0] = { index: 0, routes: [] },
diff --git a/IgniteDiffApp/app/screens/DemoDebugScreen.tsx b/IgniteDiffApp/app/screens/DemoDebugScreen.tsx
index 1914380..60758a1 100644
--- a/IgniteDiffApp/app/screens/DemoDebugScreen.tsx
+++ b/IgniteDiffApp/app/screens/DemoDebugScreen.tsx
@@ -7,10 +7,6 @@ import { colors, spacing } from "../theme"
 import { isRTL } from "../i18n"
 import { useStores } from "../models"
 
-/**
- * @param {string} url - The URL to open in the browser.
- * @returns {void} - No return value.
- */
 function openLinkInBrowser(url: string) {
   Linking.canOpenURL(url).then((canOpen) => canOpen && Linking.openURL(url))
 }
diff --git a/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoDivider.tsx b/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoDivider.tsx
index 3110cbb..62993ef 100644
--- a/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoDivider.tsx
+++ b/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoDivider.tsx
@@ -10,10 +10,6 @@ interface DemoDividerProps {
   line?: boolean
 }
 
-/**
- * @param {DemoDividerProps} props - The props for the `DemoDivider` component.
- * @returns {JSX.Element} The rendered `DemoDivider` component.
- */
 export function DemoDivider(props: DemoDividerProps) {
   const { type = "horizontal", size = 10, line = false, style: $styleOverride } = props
 
diff --git a/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoUseCase.tsx b/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoUseCase.tsx
index 402c906..19e7770 100644
--- a/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoUseCase.tsx
+++ b/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoUseCase.tsx
@@ -10,10 +10,6 @@ interface DemoUseCaseProps {
   children: ReactNode
 }
 
-/**
- * @param {DemoUseCaseProps} props - The props for the `DemoUseCase` component.
- * @returns {JSX.Element} The rendered `DemoUseCase` component.
- */
 export function DemoUseCase(props: DemoUseCaseProps) {
   const { name, description, children, layout = "column" } = props
 
diff --git a/IgniteDiffApp/app/screens/DemoShowroomScreen/DrawerIconButton.tsx b/IgniteDiffApp/app/screens/DemoShowroomScreen/DrawerIconButton.tsx
index 53c461e..7c36956 100644
--- a/IgniteDiffApp/app/screens/DemoShowroomScreen/DrawerIconButton.tsx
+++ b/IgniteDiffApp/app/screens/DemoShowroomScreen/DrawerIconButton.tsx
@@ -9,10 +9,6 @@ interface DrawerIconButtonProps extends PressableProps {}
 
 const AnimatedPressable = Animated.createAnimatedComponent(Pressable)
 
-/**
- * @param {DrawerIconButtonProps} props - The props for the `DrawerIconButton` component.
- * @returns {JSX.Element} The rendered `DrawerIconButton` component.
- */
 export function DrawerIconButton(props: DrawerIconButtonProps) {
   const { ...PressableProps } = props
   const progress = useDrawerProgress()
diff --git a/IgniteDiffApp/app/screens/ErrorScreen/ErrorBoundary.tsx b/IgniteDiffApp/app/screens/ErrorScreen/ErrorBoundary.tsx
index 7df04d9..ca8025f 100644
--- a/IgniteDiffApp/app/screens/ErrorScreen/ErrorBoundary.tsx
+++ b/IgniteDiffApp/app/screens/ErrorScreen/ErrorBoundary.tsx
@@ -16,10 +16,9 @@ interface State {
  * app. It follows the "error boundary" pattern in React. We're using a
  * class component because according to the documentation, only class
  * components can be error boundaries.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/concept/Error-Boundary/}
- * @see [React Error Boundaries]{@link https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary}
- * @param {Props} props - The props for the `ErrorBoundary` component.
- * @returns {JSX.Element} The rendered `ErrorBoundary` component.
+ *
+ * - [Documentation and Examples](https://docs.infinite.red/ignite-cli/concept/Error-Boundary/)
+ * - [React Error Boundaries](https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary)
  */
 export class ErrorBoundary extends Component<Props, State> {
   state = { error: null, errorInfo: null }
diff --git a/IgniteDiffApp/app/screens/ErrorScreen/ErrorDetails.tsx b/IgniteDiffApp/app/screens/ErrorScreen/ErrorDetails.tsx
index 5b7322c..120a367 100644
--- a/IgniteDiffApp/app/screens/ErrorScreen/ErrorDetails.tsx
+++ b/IgniteDiffApp/app/screens/ErrorScreen/ErrorDetails.tsx
@@ -9,11 +9,6 @@ export interface ErrorDetailsProps {
   onReset(): void
 }
 
-/**
- * Renders the error details screen.
- * @param {ErrorDetailsProps} props - The props for the `ErrorDetails` component.
- * @returns {JSX.Element} The rendered `ErrorDetails` component.
- */
 export function ErrorDetails(props: ErrorDetailsProps) {
   return (
     <Screen
diff --git a/IgniteDiffApp/app/services/api/api.ts b/IgniteDiffApp/app/services/api/api.ts
index f8f25ee..fc8d859 100644
--- a/IgniteDiffApp/app/services/api/api.ts
+++ b/IgniteDiffApp/app/services/api/api.ts
@@ -2,7 +2,7 @@
  * This Api class lets you define an API endpoint and methods to request
  * data and process it.
  *
- * See the [Backend API Integration](https://docs.infinite.red/ignite-cli/boilerplate/app/services/Services.md)
+ * See the [Backend API Integration](https://github.com/infinitered/ignite/blob/master/docs/Backend-API-Integration.md)
  * documentation for more details.
  */
 import { ApiResponse, ApisauceInstance, create } from "apisauce"
diff --git a/IgniteDiffApp/app/utils/useHeader.tsx b/IgniteDiffApp/app/utils/useHeader.tsx
index a3b191a..f48d3f1 100644
--- a/IgniteDiffApp/app/utils/useHeader.tsx
+++ b/IgniteDiffApp/app/utils/useHeader.tsx
@@ -4,9 +4,8 @@ import { Header, HeaderProps } from "../components"
 
 /**
  * A hook that can be used to easily set the Header of a react-navigation screen from within the screen's component.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/utility/useHeader/}
- * @param {HeaderProps} headerProps - The props for the `Header` component.
- * @param {any[]} deps - The dependencies to watch for changes to update the header.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Utils-useHeader.md)
  */
 export function useHeader(
   headerProps: HeaderProps,
diff --git a/IgniteDiffApp/app/utils/useIsMounted.ts b/IgniteDiffApp/app/utils/useIsMounted.ts
index 168627e..32f4356 100644
--- a/IgniteDiffApp/app/utils/useIsMounted.ts
+++ b/IgniteDiffApp/app/utils/useIsMounted.ts
@@ -1,9 +1,5 @@
 import { useEffect, useCallback, useRef } from "react"
 
-/**
- * A common react custom hook to check if the component is mounted.
- * @returns {() => boolean} - A function that returns true if the component is mounted.
- */
 export function useIsMounted() {
   const isMounted = useRef(false)
 
diff --git a/IgniteDiffApp/app/utils/useSafeAreaInsetsStyle.ts b/IgniteDiffApp/app/utils/useSafeAreaInsetsStyle.ts
index fb85a76..656cd0f 100644
--- a/IgniteDiffApp/app/utils/useSafeAreaInsetsStyle.ts
+++ b/IgniteDiffApp/app/utils/useSafeAreaInsetsStyle.ts
@@ -1,3 +1,4 @@
+import { FlexStyle } from "react-native"
 import { Edge, useSafeAreaInsets } from "react-native-safe-area-context"
 
 export type ExtendedEdge = Edge | "start" | "end"
@@ -16,31 +17,29 @@ const edgeInsetMap: Record<string, Edge> = {
   end: "right",
 }
 
-export type SafeAreaInsetsStyle<
-  Property extends "padding" | "margin" = "padding",
-  Edges extends Array<ExtendedEdge> = Array<ExtendedEdge>,
-> = {
-  [K in Edges[number] as `${Property}${Capitalize<K>}`]: number
-}
-
 /**
  * A hook that can be used to create a safe-area-aware style object that can be passed directly to a View.
- * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/utility/useSafeAreaInsetsStyle/}
- * @param {ExtendedEdge[]} safeAreaEdges - The edges to apply the safe area insets to.
- * @param {"padding" | "margin"} property - The property to apply the safe area insets to.
- * @returns {SafeAreaInsetsStyle<Property, Edges>} - The style object with the safe area insets applied.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Utils-useSafeAreaInsetsStyle.md)
  */
-export function useSafeAreaInsetsStyle<
-  Property extends "padding" | "margin" = "padding",
-  Edges extends Array<ExtendedEdge> = [],
->(
-  safeAreaEdges: Edges = [] as unknown as Edges,
-  property: Property = "padding" as Property,
-): SafeAreaInsetsStyle<Property, Edges> {
+export function useSafeAreaInsetsStyle(
+  safeAreaEdges: ExtendedEdge[] = [],
+  property: "padding" | "margin" = "padding",
+): Pick<
+  FlexStyle,
+  | "marginBottom"
+  | "marginEnd"
+  | "marginStart"
+  | "marginTop"
+  | "paddingBottom"
+  | "paddingEnd"
+  | "paddingStart"
+  | "paddingTop"
+> {
   const insets = useSafeAreaInsets()
 
   return safeAreaEdges.reduce((acc, e) => {
     const value = edgeInsetMap[e] ?? e
     return { ...acc, [`${property}${propertySuffixMap[e]}`]: insets[value] }
-  }, {}) as SafeAreaInsetsStyle<Property, Edges>
+  }, {})
 }
diff --git a/IgniteDiffApp/package.json b/IgniteDiffApp/package.json
index f8425ad..32d7190 100644
--- a/IgniteDiffApp/package.json
+++ b/IgniteDiffApp/package.json
@@ -88,17 +88,17 @@
     "eslint-plugin-promise": "6.0.0",
     "eslint-plugin-react": "7.30.0",
     "eslint-plugin-react-native": "4.0.0",
-    "eslint-plugin-reactotron": "^0.1.2",
+    "eslint-plugin-reactotron": "^0.1.1",
     "jest": "^29.2.1",
     "jest-expo": "49.0.0",
     "patch-package": "6.4.7",
     "postinstall-prepare": "1.0.1",
     "prettier": "2.8.8",
     "react-test-renderer": "18.2.0",
-    "reactotron-core-client": "^2.8.13",
-    "reactotron-mst": "^3.1.7",
-    "reactotron-react-js": "^3.3.11",
-    "reactotron-react-native": "^5.0.5",
+    "reactotron-core-client": "2.8.11",
+    "reactotron-mst": "3.1.5",
+    "reactotron-react-js": "3.3.9",
+    "reactotron-react-native": "5.0.4",
     "ts-jest": "^29.1.1",
     "ts-node": "^10.9.2",
     "typescript": "5.3.2"
diff --git a/IgniteDiffApp/test/setup.ts b/IgniteDiffApp/test/setup.ts
index 1c67101..28040ba 100644
--- a/IgniteDiffApp/test/setup.ts
+++ b/IgniteDiffApp/test/setup.ts
@@ -34,13 +34,9 @@ jest.mock("i18n-js", () => ({
   },
 }))
 
-jest.mock("expo-localization", () => ({
-  ...jest.requireActual("expo-localization"),
-  getLocales: () => [{ languageTag: "en-US", textDirection: "ltr" }],
-}))
-
 declare const tron // eslint-disable-line @typescript-eslint/no-unused-vars
 
+jest.useFakeTimers()
 declare global {
   let __TEST__: boolean
 }
diff --git a/IgniteDiffApp/yarn.lock b/IgniteDiffApp/yarn.lock
index 73e3ced..111525e 100644
--- a/IgniteDiffApp/yarn.lock
+++ b/IgniteDiffApp/yarn.lock
@@ -3792,7 +3792,7 @@ decimal.js@^10.4.2:
   resolved "https://registry.yarnpkg.com/decimal.js/-/decimal.js-10.4.3.tgz#1044092884d245d1b7f65725fa4ad4c6f781cc23"
   integrity sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA==
 
-decode-uri-component@^0.2.2:
+decode-uri-component@^0.2.0, decode-uri-component@^0.2.2:
   version "0.2.2"
   resolved "https://registry.yarnpkg.com/decode-uri-component/-/decode-uri-component-0.2.2.tgz#e69dbe25d37941171dd540e024c444cd5188e1e9"
   integrity sha512-FqUYQ+8o158GyGTrMFJms9qh3CqTKvAqgqsTnkLI8sKu0028orqBhxNMFkFen0zGyg6epACD32pjVk58ngIErQ==
@@ -4297,7 +4297,7 @@ eslint-plugin-react@7.30.0:
     semver "^6.3.0"
     string.prototype.matchall "^4.0.7"
 
-eslint-plugin-reactotron@^0.1.2:
+eslint-plugin-reactotron@^0.1.1:
   version "0.1.4"
   resolved "https://registry.yarnpkg.com/eslint-plugin-reactotron/-/eslint-plugin-reactotron-0.1.4.tgz#a22134a823c5fd9f97659e426e4eaca2da909212"
   integrity sha512-UjMjLQFIaqGqrArA7tBMeCzutdJ1Lp9vtH8tkU5ThDxh3HI2mwI8vJ9efjYm8Zru/m2ec1Swr+NayPTAJ9IZvA==
@@ -7879,6 +7879,16 @@ qs@^6.11.0:
   dependencies:
     side-channel "^1.0.6"
 
+query-string@6.14.1:
+  version "6.14.1"
+  resolved "https://registry.yarnpkg.com/query-string/-/query-string-6.14.1.tgz#7ac2dca46da7f309449ba0f86b1fd28255b0c86a"
+  integrity sha512-XDxAeVmpfu1/6IjyT/gXHOl+S0vQ9owggJ30hhWKdHAsNPOcasn5o9BW0eejZqL2e4vMjhAxoW3jVHcD6mbcYw==
+  dependencies:
+    decode-uri-component "^0.2.0"
+    filter-obj "^1.1.0"
+    split-on-first "^1.0.0"
+    strict-uri-encode "^2.0.0"
+
 query-string@^7.1.3:
   version "7.1.3"
   resolved "https://registry.yarnpkg.com/query-string/-/query-string-7.1.3.tgz#a1cf90e994abb113a325804a972d98276fe02328"
@@ -7906,10 +7916,10 @@ queue@6.0.2:
   dependencies:
     inherits "~2.0.3"
 
-ramda@^0.28.0:
-  version "0.28.0"
-  resolved "https://registry.yarnpkg.com/ramda/-/ramda-0.28.0.tgz#acd785690100337e8b063cab3470019be427cc97"
-  integrity sha512-9QnLuG/kPVgWvMQ4aODhsBUFKOUmnbUnsSXACv+NCQZcHbeb+v8Lodp8OVxtRULN1/xOyYLLaL6npE6dMq5QTA==
+ramda@^0.25.0:
+  version "0.25.0"
+  resolved "https://registry.yarnpkg.com/ramda/-/ramda-0.25.0.tgz#8fdf68231cffa90bc2f9460390a0cb74a29b29a9"
+  integrity sha512-GXpfrYVPwx3K7RQ6aYT8KPS8XViSXUVJT1ONhoKPE9VAleW42YE+U+8VEyGWt41EnEQW7gwecYJriTI0pKoecQ==
 
 range-parser@~1.2.1:
   version "1.2.1"
@@ -8103,40 +8113,41 @@ react@18.2.0:
   dependencies:
     loose-envify "^1.1.0"
 
-reactotron-core-client@2.9.3, reactotron-core-client@^2.8.13:
-  version "2.9.3"
-  resolved "https://registry.yarnpkg.com/reactotron-core-client/-/reactotron-core-client-2.9.3.tgz#5694ad2be95e40cfcaf792a7f3fcab14f8247481"
-  integrity sha512-Z+PdYPi2ZsMyibH4251R2QpnIVrpgRoIFJYjeDF7LyomizkrOAugZDnTUNtUhVAqDb0eEWi4qaxUeEfnvZsn4w==
+reactotron-core-client@2.8.11:
+  version "2.8.11"
+  resolved "https://registry.yarnpkg.com/reactotron-core-client/-/reactotron-core-client-2.8.11.tgz#93c7d9c0038704c22b0e9d1e6de54e1578051442"
+  integrity sha512-zoqKrAqWjTPpa1s1AtVZPZItYE8Kjgs99v9gcKMCW2Ejcba9fYOoRCwu0zqoHU8iWyBzJsOWVai0FdRVRUHf8Q==
   dependencies:
-    reactotron-core-contract "0.2.3"
+    reactotron-core-contract "0.1.1"
 
-reactotron-core-contract@0.2.3:
-  version "0.2.3"
-  resolved "https://registry.yarnpkg.com/reactotron-core-contract/-/reactotron-core-contract-0.2.3.tgz#4b72bbe2905fda2a7e69f2653fc32bbdaaebb052"
-  integrity sha512-GMeulATwiTsAqRnTKLWgM4gG3pUxAuspW412SWutHIW0fZNEOiHg8bWTEQURhm1WZj+u4tmdbkPiIWBfH8fvvQ==
+reactotron-core-contract@0.1.1:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/reactotron-core-contract/-/reactotron-core-contract-0.1.1.tgz#3fc0e72e17a71c830c752985b5d2a5dd3df79166"
+  integrity sha512-NmmojG6Pz97NJe8ov0oZgIxxaaEkXsVAiFOeFTI4QH03qMqAs6d28nUd5bTrKLipxWy5rPr4PXITE7AHdT0kaw==
 
-reactotron-mst@^3.1.7:
-  version "3.1.9"
-  resolved "https://registry.yarnpkg.com/reactotron-mst/-/reactotron-mst-3.1.9.tgz#c1c0c43eb0a0a12c8d5e5faad3d56f1ba1687ec1"
-  integrity sha512-xULM9WP4oyxR592tsA/7eg/Lu6MNYU0qJqhTGWlctlwo+iQzfR7MXwAALiYdTdMr8qH0LjqGmaIuXdwGZodDpg==
+reactotron-mst@3.1.5:
+  version "3.1.5"
+  resolved "https://registry.yarnpkg.com/reactotron-mst/-/reactotron-mst-3.1.5.tgz#aa8e47ff15f862d9a95ce5cd865cb6549ff6368f"
+  integrity sha512-o15kCGkWdf7yILqzax/1rCyMW9O5B/seYxmqOZAz+C7/l79Xi+iPNgcVDTMi3fnhRariedk3ytF/iy11G2QPZg==
   dependencies:
-    ramda "^0.28.0"
+    ramda "^0.25.0"
 
-reactotron-react-js@^3.3.11:
-  version "3.3.14"
-  resolved "https://registry.yarnpkg.com/reactotron-react-js/-/reactotron-react-js-3.3.14.tgz#0884a8ae7ac166d57a4939e0a4fd77cef71cddf2"
-  integrity sha512-rv0HNXiDQy1DTN8DH6Uh0uWsyB3NK2Jfb+NcPPe+1YmeNg+lONH8xaNGiMRrkV20z5aviljOARM3WAh3YI8sZQ==
+reactotron-react-js@3.3.9:
+  version "3.3.9"
+  resolved "https://registry.yarnpkg.com/reactotron-react-js/-/reactotron-react-js-3.3.9.tgz#5d88bc8859c817a36e968d04803419a835008456"
+  integrity sha512-EKql8RumpNPTOEYHHO8/th7Ckb0YXQoZmJLyjv8N2ckNO2+5EVMSe1Tg4BQxJ2bFGeypbp2wZ2Vuhk2WEU1XyA==
   dependencies:
-    reactotron-core-client "2.9.3"
+    reactotron-core-client "2.8.11"
     stacktrace-js "2.0.1"
 
-reactotron-react-native@^5.0.5:
-  version "5.1.7"
-  resolved "https://registry.yarnpkg.com/reactotron-react-native/-/reactotron-react-native-5.1.7.tgz#eb344d274615f505c0ec716dc622690e2356e7cb"
-  integrity sha512-JA2NpnPJo7tHew9tMzELslmF8JX/5pDftrvrG63diZ1uW0S7UYufS47JVZEGsGozgMttERp0APMBdiTBrPW1iQ==
+reactotron-react-native@5.0.4:
+  version "5.0.4"
+  resolved "https://registry.yarnpkg.com/reactotron-react-native/-/reactotron-react-native-5.0.4.tgz#4bff2e74f2a99bf4963db130a6b392036bd90130"
+  integrity sha512-Ho5PXLtF4GirFzhjdzbVgRk9Idf3woK5c9Cx1lVdYMVb96kzUMlzn2qCD7H6t/yjIFik9LM/3ncWWNHacVySNg==
   dependencies:
     mitt "^3.0.1"
-    reactotron-core-client "2.9.3"
+    query-string "6.14.1"
+    reactotron-core-client "2.8.11"
   optionalDependencies:
     react-native-flipper "^0.164.0"
 
